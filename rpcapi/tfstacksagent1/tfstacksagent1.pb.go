// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.27.1
// source: tfstacksagent1.proto

package tfstacksagent1

import (
	reflect "reflect"
	sync "sync"

	terraform1 "terraform-migrate-utility/rpcapi/terraform1"
	dependencies "terraform-migrate-utility/rpcapi/terraform1/dependencies"
	stacks "terraform-migrate-utility/rpcapi/terraform1/stacks"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes our "raw config" format that passes verbatim from stack_prepare
// to both stack_plan and stack_apply, so that the agent can pass arbitrary
// analysis context between the jobs without always needing to update Atlas
// whenever we need to track something new or different.
type StackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is currently always set to 1, the first version of this format.
	//
	// It should change only if a subsequent version is incompatible to the
	// extent that an older version of the agent would behave incorrectly
	// when encountering the newer format. Changes to this message should
	// be both backward- and forward-compatible as far as possible, which
	// then does not require changing this version number, because the
	// plan and apply phases might be run by a different agent version than
	// the one that ran the prepare job.
	//
	// If we do make a new major version of this format, it's safe to use
	// a new message type for it as long as it includes an equivalent
	// definition of format_version; the message name and field name are not
	// part of the protocol buffers wire format, but the type and index of this
	// field must match.
	FormatVersion int64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// The version selections and checksums for external provider plugins
	// available for use by the stack configuration.
	ProviderPlugins []*terraform1.ProviderPackage `protobuf:"bytes,2,rep,name=provider_plugins,json=providerPlugins,proto3" json:"provider_plugins,omitempty"`
	// Records all of the schemas for the providers used by this configuration,
	// as returned by Terraform Core.
	//
	// We strip all docstring objects from the schema before storing it, so
	// all docstring fields will always be unpopulated. We're interested only
	// in the machine-readable type information.
	ProviderSchemas map[string]*dependencies.ProviderSchema `protobuf:"bytes,3,rep,name=provider_schemas,json=providerSchemas,proto3" json:"provider_schemas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StackConfig) Reset() {
	*x = StackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tfstacksagent1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackConfig) ProtoMessage() {}

func (x *StackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tfstacksagent1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackConfig.ProtoReflect.Descriptor instead.
func (*StackConfig) Descriptor() ([]byte, []int) {
	return file_tfstacksagent1_proto_rawDescGZIP(), []int{0}
}

func (x *StackConfig) GetFormatVersion() int64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *StackConfig) GetProviderPlugins() []*terraform1.ProviderPackage {
	if x != nil {
		return x.ProviderPlugins
	}
	return nil
}

func (x *StackConfig) GetProviderSchemas() map[string]*dependencies.ProviderSchema {
	if x != nil {
		return x.ProviderSchemas
	}
	return nil
}

// Describes our "raw plan" format that passes verbatim from stack_plan to
// stack_apply so that we can reload all of the information required to
// actually apply the plan.
type StackPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is currently always set to 1, the first version of this format.
	//
	// It should change only if a subsequent version is incompatible to the
	// extent that an older version of the agent would behave incorrectly
	// when encountering the newer format. For most changes we should try to
	// be backward-compatible.
	//
	// If we do make a new major version of this format, it's safe to use
	// a new message type for it as long as it includes an equivalent
	// definition of format_version; the message name and field name are not
	// part of the protocol buffers wire format, but the type and index of this
	// field must match.
	FormatVersion int64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// We store the full planned changes messages received from Terraform Core,
	// each of which has two parts:
	//
	//   - Raw protocol buffers messages emitted by Terraform Core during the
	//     planning process. They are opaque to HCP Terraform Agent and all
	//     other subsystems, so should just be passed verbatim back to Terraform
	//     Core during the apply step without making any attempt to decode them.
	//
	//   - Change descriptions interpreted by HCP Terraform Agent and converted
	//     into an external JSON format, for use by other systems.
	PlannedChanges []*stacks.PlannedChange `protobuf:"bytes,2,rep,name=planned_changes,json=plannedChanges,proto3" json:"planned_changes,omitempty"`
	// The mode used to create the plan is useful for later reasoning about the
	// semantics of the entire operation.
	PlanMode stacks.PlanMode `protobuf:"varint,3,opt,name=plan_mode,json=planMode,proto3,enum=terraform1.stacks.PlanMode" json:"plan_mode,omitempty"`
}

func (x *StackPlan) Reset() {
	*x = StackPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tfstacksagent1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackPlan) ProtoMessage() {}

func (x *StackPlan) ProtoReflect() protoreflect.Message {
	mi := &file_tfstacksagent1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackPlan.ProtoReflect.Descriptor instead.
func (*StackPlan) Descriptor() ([]byte, []int) {
	return file_tfstacksagent1_proto_rawDescGZIP(), []int{1}
}

func (x *StackPlan) GetFormatVersion() int64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *StackPlan) GetPlannedChanges() []*stacks.PlannedChange {
	if x != nil {
		return x.PlannedChanges
	}
	return nil
}

func (x *StackPlan) GetPlanMode() stacks.PlanMode {
	if x != nil {
		return x.PlanMode
	}
	return stacks.PlanMode(0)
}

// Describes our "raw state" format that is used as the input to both plan and
// apply operations, and is updated by apply operations. The state consists of
// two maps: the raw state values, and the state descriptions. Both maps are
// updated by HCP Terraform Agent according to the protocol specification.
type StackState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is currently always set to 1, the first version of this format.
	//
	// It should change only if a subsequent version is incompatible to the
	// extent that an older version of the agent would behave incorrectly
	// when encountering the newer format. For most changes we should try to
	// be backward-compatible.
	//
	// If we do make a new major version of this format, it's safe to use
	// a new message type for it as long as it includes an equivalent
	// definition of format_version; the message name and field name are not
	// part of the protocol buffers wire format, but the type and index of this
	// field must match.
	FormatVersion int64 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// Raw state values. This map contains raw protocol buffers messages
	// emitted by Terraform Core during the apply operation. They are opaque
	// to HCP Terraform Agent and all other subsystems, so should just be
	// passed verbatim back to Terraform Core for subseqeuent plan and apply
	// operations without making any attempt to decode them.
	Raw map[string]*anypb.Any `protobuf:"bytes,2,rep,name=raw,proto3" json:"raw,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// State descriptions. This map contains the decoded change descriptions
	// emitted by Terraform during the apply operation. HCP Terraform Agent
	// decodes these in order to update the change description document and
	// produce the state description document. These are stored verbatim,
	// including any unknown fields, so that a later agent version can
	// reprocess them into the JSON description formats without losing data.
	Descriptions map[string]*stacks.AppliedChange_ChangeDescription `protobuf:"bytes,3,rep,name=descriptions,proto3" json:"descriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StackState) Reset() {
	*x = StackState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tfstacksagent1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackState) ProtoMessage() {}

func (x *StackState) ProtoReflect() protoreflect.Message {
	mi := &file_tfstacksagent1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackState.ProtoReflect.Descriptor instead.
func (*StackState) Descriptor() ([]byte, []int) {
	return file_tfstacksagent1_proto_rawDescGZIP(), []int{2}
}

func (x *StackState) GetFormatVersion() int64 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *StackState) GetRaw() map[string]*anypb.Any {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *StackState) GetDescriptions() map[string]*stacks.AppliedChange_ChangeDescription {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

var File_tfstacksagent1_proto protoreflect.FileDescriptor

var file_tfstacksagent1_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x1a, 0x6b, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xff, 0x02, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x50, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x52,
	0x61, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x11, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x31, 0x2e, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x46,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x74, 0x66, 0x63, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x74, 0x66, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tfstacksagent1_proto_rawDescOnce sync.Once
	file_tfstacksagent1_proto_rawDescData = file_tfstacksagent1_proto_rawDesc
)

func file_tfstacksagent1_proto_rawDescGZIP() []byte {
	file_tfstacksagent1_proto_rawDescOnce.Do(func() {
		file_tfstacksagent1_proto_rawDescData = protoimpl.X.CompressGZIP(file_tfstacksagent1_proto_rawDescData)
	})
	return file_tfstacksagent1_proto_rawDescData
}

var file_tfstacksagent1_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tfstacksagent1_proto_goTypes = []interface{}{
	(*StackConfig)(nil),                 // 0: tfstacksagent1.StackConfig
	(*StackPlan)(nil),                   // 1: tfstacksagent1.StackPlan
	(*StackState)(nil),                  // 2: tfstacksagent1.StackState
	nil,                                 // 3: tfstacksagent1.StackConfig.ProviderSchemasEntry
	nil,                                 // 4: tfstacksagent1.StackState.RawEntry
	nil,                                 // 5: tfstacksagent1.StackState.DescriptionsEntry
	(*terraform1.ProviderPackage)(nil),  // 6: terraform1.ProviderPackage
	(*stacks.PlannedChange)(nil),        // 7: terraform1.stacks.PlannedChange
	(stacks.PlanMode)(0),                // 8: terraform1.stacks.PlanMode
	(*dependencies.ProviderSchema)(nil), // 9: terraform1.dependencies.ProviderSchema
	(*anypb.Any)(nil),                   // 10: google.protobuf.Any
	(*stacks.AppliedChange_ChangeDescription)(nil), // 11: terraform1.stacks.AppliedChange.ChangeDescription
}
var file_tfstacksagent1_proto_depIdxs = []int32{
	6,  // 0: tfstacksagent1.StackConfig.provider_plugins:type_name -> terraform1.ProviderPackage
	3,  // 1: tfstacksagent1.StackConfig.provider_schemas:type_name -> tfstacksagent1.StackConfig.ProviderSchemasEntry
	7,  // 2: tfstacksagent1.StackPlan.planned_changes:type_name -> terraform1.stacks.PlannedChange
	8,  // 3: tfstacksagent1.StackPlan.plan_mode:type_name -> terraform1.stacks.PlanMode
	4,  // 4: tfstacksagent1.StackState.raw:type_name -> tfstacksagent1.StackState.RawEntry
	5,  // 5: tfstacksagent1.StackState.descriptions:type_name -> tfstacksagent1.StackState.DescriptionsEntry
	9,  // 6: tfstacksagent1.StackConfig.ProviderSchemasEntry.value:type_name -> terraform1.dependencies.ProviderSchema
	10, // 7: tfstacksagent1.StackState.RawEntry.value:type_name -> google.protobuf.Any
	11, // 8: tfstacksagent1.StackState.DescriptionsEntry.value:type_name -> terraform1.stacks.AppliedChange.ChangeDescription
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tfstacksagent1_proto_init() }
func file_tfstacksagent1_proto_init() {
	if File_tfstacksagent1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tfstacksagent1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tfstacksagent1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tfstacksagent1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tfstacksagent1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tfstacksagent1_proto_goTypes,
		DependencyIndexes: file_tfstacksagent1_proto_depIdxs,
		MessageInfos:      file_tfstacksagent1_proto_msgTypes,
	}.Build()
	File_tfstacksagent1_proto = out.File
	file_tfstacksagent1_proto_rawDesc = nil
	file_tfstacksagent1_proto_goTypes = nil
	file_tfstacksagent1_proto_depIdxs = nil
}
